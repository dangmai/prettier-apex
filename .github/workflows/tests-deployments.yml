name: Tests and Deployments

on:
  push:
  pull_request:
  schedule:
    - cron: '0 8 * * *'
  repository_dispatch:
    types: manual-test-run

jobs:
  functional-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node:
          - "15"
          - "14"
          - "12"
          - "10"
        include:
          - node: "14"
            ENABLE_CODE_COVERAGE: true
            ENABLE_INTEGRATION_TESTS: true
    env:
      ENABLE_CODE_COVERAGE: ${{ matrix.ENABLE_CODE_COVERAGE }}
      RUN_INTEGRATION_TESTS: ${{ matrix.ENABLE_INTEGRATION_TESTS && (github.event_name == 'schedule' || github.event_name == 'pull_request' || github.event_name == 'repository_dispatch' || startsWith(github.ref, 'refs/tags')) }}
      RUN_DEPLOYMENT: ${{ startsWith(github.ref, 'refs/tags') }}
    name: Run tests on NodeJS ${{ matrix.node }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2.1.2
        with:
          node-version: ${{ matrix.node }}

      - name: Install NPM dependencies
        run: npm ci

      - name: Run Apex parsing server
        run: nohup npm run start-server &

      - name: Wait for Apex parsing server to be up
        run: npm run wait-server

      - name: Run functional tests
        run: npm test -- -c jest.config.standalone.js

      - name: Upload code coverage
        if: matrix.ENABLE_CODE_COVERAGE
        uses: codecov/codecov-action@v1

      - name: Install integration test suite dependencies
        if: env.RUN_INTEGRATION_TESTS == 'true'
        run: sudo apt-get install -y -qq parallel

      - name: Run integration tests
        if: env.RUN_INTEGRATION_TESTS == 'true'
        run: ./tests_integration/run-integration-tests.sh

      - name: Deploy to NPM
        if: env.RUN_DEPLOYMENT == 'true'
        uses: JS-DevTools/npm-publish@v1
        with:
          token: ${{ secrets.NPM_TOKEN }}

      - name: Create Release
        if: env.RUN_DEPLOYMENT == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}

      - name: Stop Apex parsing server
        if: ${{ always() }}
        run: npm run stop-server
